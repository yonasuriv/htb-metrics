#!/usr/bin/env python3
import json
import re
import os
import glob
import datetime

# Path to the index.html file
file_path = 'badge.html'

# Base URL for the avatars
base_url = "https://labs.hackthebox.com"

# Define the directories
profile_dir = "data/user_profile"
team_dir = "data/user_team"

# Define the file paths for the profile and team directories
file_paths = {
    "profile_data": os.path.join(profile_dir, 'profile_data.json'),
    "profile_challenges": os.path.join(profile_dir, 'challenges_data.json'),
    "profile_endgames": os.path.join(profile_di/user_teamr, 'endgames_data.json'),
    "profile_fortresses": os.path.join(profile_dir, 'fortresses_data.json'),
    "profile_machines": os.path.join(profile_dir, 'machines_data.json'),
    "profile_os": os.path.join(profile_dir, 'os_data.json'),
    "profile_prolabs": os.path.join(profile_dir, 'prolabs_data.json'),
    "profile_sherlocks": os.path.join(profile_dir, 'sherlocks_data.json'),
    "team_profile": os.path.join(team_dir, 'team_profile_data.json'),
    "team_machines": os.path.join(team_dir, 'team_machines_data.json'),
    "team_challenges": os.path.join(team_dir, 'team_challenges_data.json'),
    "team_rank": os.path.join(team_dir, 'team_rank_data.json'),
    "team_rank_best": os.path.join(team_dir, 'team_rank_best_data.json'),
}

# Get all JSON files from both the profile and team directories
json_files = glob.glob(os.path.join(profile_dir, "*.json")) + glob.glob(os.path.join(team_dir, "*.json"))

## / DEPLOY START WITH DATE

# Define the content to insert
date_str = datetime.datetime.now().strftime("%d %b %Y, %H:%M:%S")
deploy_start = f'''
var date = "Last updated {date_str}";

Object.entries({{
    date: date,
'''.strip()

# Markers
start_marker = "// DATA LOAD SCRIPT DEPLOY START //"
end_marker = "    // START profile_data.json"

# Read the content of the file
with open(file_path, 'r') as file:
    lines = file.readlines()

# Open the file to overwrite content
with open(file_path, 'w') as file:
    in_replacement_block = False
    marker_found = False

    for line in lines:
        # Look for the start marker and append content after it
        if line.startswith(start_marker):
            marker_found = True
            in_replacement_block = True
            file.write(line)  # Write the start marker exactly as is
            file.write(deploy_start + '\n')  # Append the new date and entries after the start marker
        # Stop appending content when the end marker is found
        elif line.startswith(end_marker) and in_replacement_block:
            in_replacement_block = False
            file.write(line)  # Write the end marker exactly as is
        # Write the rest of the lines that are outside the markers
        elif not in_replacement_block:
            file.write(line)

if not marker_found:
    print(f"Start marker '{start_marker}' not found in the file.")

## / DEFINE PATHS AND FILES

# Function to convert a key to a valid JavaScript variable name
def convert_to_js_var_name(key):
    return key.replace(" ", "_").replace(".", "_").lower()

## / HELPERS

def process_profile_data(profile_data):
    
    processed_data = {}
    for key, value in profile_data.items():
        if key == "avatar":
            processed_data["profile_avatar"] = base_url + value
        elif key == "team":
            team_data = profile_data["team"]
            team_data["avatar"] = base_url + team_data["avatar"]
            processed_data["profile_team"] = team_data
        elif key == "next_rank_points":
            processed_data["profile_next_rank_points"] = round(value, 2)
        else:
            processed_data[f"profile_{key}"] = value
    
    return processed_data

def process_challenges_data(challenges_data):
    base_data = challenges_data["profile"]
    processed_data = {}

    # Process solved tasks
    processed_data["profile_solved_tasks"] = base_data.get("solved_tasks", 0)

    # Process challenge ownership, splitting into separate keys
    processed_data["profile_challenge_owns_solved"] = base_data["challenge_owns"]["solved"]
    processed_data["profile_challenge_owns_total"] = base_data["challenge_owns"]["total"]
    processed_data["profile_challenge_owns_percentage"] = round(base_data["challenge_owns"]["percentage"], 2)

    # Process challenge categories with unique names
    for i, category in enumerate(base_data["challenge_categories"]):
        prefix = f"profile_challenge_category_{i+1}"
        processed_data[f"{prefix}_name"] = category["name"].title()  # Capitalize the category name
        processed_data[f"{prefix}_owned_flags"] = category["owned_flags"]
        processed_data[f"{prefix}_total_flags"] = category["total_flags"]
        processed_data[f"{prefix}_completion_percentage"] = round(category["completion_percentage"], 2)
        processed_data[f"{prefix}_avg_user_solved"] = round(category["avg_user_solved"], 2)

    # Process challenge difficulties with unique names
    for i, difficulty in enumerate(base_data["challenge_difficulties"]):
        prefix = f"profile_challenge_difficulty_{i+1}"
        processed_data[f"{prefix}_name"] = difficulty["name"].title()  # Capitalize the difficulty name
        processed_data[f"{prefix}_owned_challenges"] = difficulty["owned_challenges"]
        processed_data[f"{prefix}_total_challenges"] = difficulty["total_challenges"]
        processed_data[f"{prefix}_completion_percentage"] = round(difficulty["completion_percentage"], 2)

    return processed_data

# Iterate over each .json file in the profile_dir and team_dir
for json_file_path in json_files:
    # Get the filename (without directory) for labeling purposes
    file_name = os.path.basename(json_file_path)
    
    # Read the JSON file
    with open(json_file_path, 'r') as json_file:
        try:
            data = json.load(json_file)
        except json.JSONDecodeError as e:   
            print(f"Error decoding JSON from {file_name}: {e}")
            continue

    if file_name == 'profile_data.json':
        data = process_profile_data(data["profile"])
    elif file_name == 'challenges_data.json':
        data = process_challenges_data(data["profile"])

    # Before starting the loop, add the date line just after the deploy start marker
    start_marker_js = '// DATA LOAD SCRIPT DEPLOY START //'
    end_marker_js = '// DATA LOAD SCRIPT DEPLOY START //'

    # Add the date variable at the start
    js_code = []

    # List to hold hidden span elements
    hidden_spans = []

    # Dictionary to hold class and their values
    class_values = {}

    # Process each key in the profile dictionary
    for key, value in data.items():
        # Convert the key to a valid JS variable name (also used as class name)
        js_var = convert_to_js_var_name(key)
        
        # Handle the avatar URLs: prepend with base_url
        if key == "avatar":
            value = base_url + value

        if key == "team_avatar":
            value = base_url + value

        # If it's a dictionary (like 'team'), process its contents as variables
        if isinstance(value, dict):
            for sub_key, sub_value in value.items():
                sub_js_var = convert_to_js_var_name(f"{key}_{sub_key}")
                class_values[sub_js_var] = sub_value
                # Add hidden span for sub-key
                hidden_spans.append(f'<span class="{sub_js_var}"></span><br>')
        else:
            class_values[js_var] = value

        # Add a hidden span element for this key
        hidden_spans.append(f'<span class="{js_var}"></span><br>')


    # Add the rest of the class-value pairs to the looped JS structure
    for js_var, value in class_values.items():
        # If the value is None, it should be represented as `null` in JavaScript
        if value is None:
            js_value = "null"
        # If the value is a string, wrap it in quotes
        elif isinstance(value, str):
            js_value = f'"{value}"'
        else:
            # Otherwise, use the value as-is (for numbers, etc.)
            js_value = value

        js_code.append(f'    {js_var}: {js_value},')

    # Join the generated JavaScript code into a single string
    generated_content = '\n'.join(js_code)  # Add indentation for better formatting

    # Read the badge.html file
    with open('./badge.html', 'r') as html_file:
        html_content = html_file.read()

    # Define the markers for the JavaScript section with the filename
    start_marker_js = f'    // START {file_name}'
    end_marker_js = f'    // END {file_name}'

    # Use regex to find the markers and replace the content between them for JavaScript
    pattern_js = re.compile(f'({re.escape(start_marker_js)})(.*?){re.escape(end_marker_js)}', re.DOTALL)

    # Replace the content between the JavaScript markers with the generated JavaScript
    new_html_content = re.sub(
        pattern_js,
        f'{start_marker_js}\n{generated_content}\n{end_marker_js}',
        html_content
    )

    # Define the markers for the hidden spans section with the filename
    start_marker_spans = f'    <!-- START {file_name} -->'
    end_marker_spans = f'    <!-- END {file_name} -->'
##############################
    # Join the hidden spans into a single string
    generated_hidden_spans = '\n    '.join(hidden_spans)

    # Use regex to find the markers and replace the content between them for hidden spans
    pattern_spans = re.compile(f'({re.escape(start_marker_spans)})(.*?){re.escape(end_marker_spans)}', re.DOTALL)

    # Replace the content between the hidden span markers with the generated hidden spans
    new_html_content = re.sub(
        pattern_spans,
        f'{start_marker_spans}\n    {generated_hidden_spans}\n{end_marker_spans}',
        new_html_content
    )

    # Write the modified content back to badge.html
    with open(file_path, 'w') as file:
        file.write(new_html_content)

## / DEPLOY END

    deploy_end = """});""" 

    # Read the content of the file
    with open(file_path, 'r') as file:
        lines = file.readlines()

    # Open the file to overwrite content
    with open(file_path, 'w') as file:
        previous_line = ""  # To track the line before the end marker
        for i, line in enumerate(lines):
            # Check if the current line is the end marker
            if line.startswith('// DATA LOAD SCRIPT DEPLOY END //'):
                # Overwrite the line before the marker with the new content
                if previous_line:
                    # Remove the previously written line and replace it with the new content
                    lines[i - 1] = deploy_end + '\n'
            previous_line = line  # Track the current line for next iteration

        # Write all lines (with modifications) back to the file
        file.writelines(lines)

## / END MESSAGE

    print(f"JavaScript code and hidden spans for {file_name} successfully appended to badge.html!")
